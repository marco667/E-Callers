package org.digit.ECallers.forms;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.Part;

import org.digit.ECallers.beans.InfosSuppl;
import org.digit.ECallers.beans.User;
import org.digit.ECallers.dao.DAOException;
import org.digit.ECallers.dao.UserDao;


import sun.util.calendar.BaseCalendar.Date;

public class InfosSupplementsForm {
	
	private static final String CHAMP_PHOTOUSER = "photoUser";
	private static final String CHAMP_DATENAISS = "dateNaiss";
	private static final String CHAMP_EMAIL = "email";
	private static final String CHAMP_SEXE = "sexe";
	public static final String CHEMIN_FICHIERS = "/Users/MALKO/Pictures/fichiers/";
	
	private static final int    TAILLE_TAMPON   = 10240;                        // 10ko

	private String resultat;
	private Map<String, String> erreurs = new HashMap<String, String>();
	
	private UserDao      utilisateurDao;

	public InfosSupplementsForm( UserDao utilisateurDao ) {
	    this.utilisateurDao = utilisateurDao;
	}

	public String getResultat() {
	    return resultat;
	}

	public Map<String, String> getErreurs() {
	    return erreurs;
	}
	

	public InfosSuppl InfosSupplements( HttpServletRequest request, String chemin ) {
	    String photoUser = getValeurChamp( request, CHAMP_PHOTOUSER );
	    String dateNaiss = getValeurChamp( request, CHAMP_DATENAISS );
	    String email = getValeurChamp( request, CHAMP_EMAIL );
	    String sexe = getValeurChamp( request, CHAMP_SEXE );
	    

	    InfosSuppl infosUser = new InfosSuppl();

	   
	    try {
	        traiterEmail( email, infosUser );
	        traiterDate( dateNaiss, infosUser );
	        traiterPhoto( request, chemin, photoUser, infosUser );
	        traiterSexe( sexe, infosUser );

	        if ( erreurs.isEmpty() ) {
	            utilisateurDao.addInfosByuser(infosUser);
	            resultat = " Succes.";
	        } else {
	            resultat = " Echec.";
	        }
	    } catch ( DAOException e ) {
	        resultat = "Echec : une erreur imprevue est survenue, merci de reessayer dans quelques instants.";
	        e.printStackTrace();
	    }


	    return infosUser;
	}
	
	 private void traiterEmail( String email, InfosSuppl infosUser ) {
	        try {
	            validationEmail( email );
	        } catch ( FormValidationException e ) {
	            setErreur( CHAMP_EMAIL, e.getMessage() );
	        }
	        infosUser.setEmail(email);
	    }

	    private void traiterDate( String dateNaiss, InfosSuppl infosUser ) {
	        try {
	            validationDate( dateNaiss );
	        } catch ( FormValidationException e ) {
	            setErreur( CHAMP_DATENAISS, e.getMessage() );
	        }
	        infosUser.setDateNaiss(dateNaiss);
	    }
	    
	    private void traiterSexe( String sexe, InfosSuppl infosUser ) {
	        try {
	            validationSexe( sexe );
	        } catch ( FormValidationException e ) {
	            setErreur( CHAMP_SEXE, e.getMessage() );
	        }
	        infosUser.setSexe(sexe);
	    }
	    
	    private void traiterPhoto(HttpServletRequest request, String chemin, String photo,InfosSuppl infosUser ) {
	        try {
	            validationImage( request, chemin );
	            
	        } catch ( FormValidationException e ) {
	            setErreur( CHAMP_PHOTOUSER, e.getMessage() );
	        }
	        infosUser.setPhotoUser(photo);
	    }
	    
	    private void validationSexe( String sexe ) throws FormValidationException {
	        if ( sexe == null ) {
	           
	            throw new FormValidationException( "Merci d'entrer votre sexe." );
	        }
	    }
	    
	    private void validationDate( String dateNaiss ) throws FormValidationException {
	        if ( dateNaiss == null ) {
	           
	            throw new FormValidationException( "Merci d'entrer votre date de naissance." );
	        }
	    }

	    private void validationEmail( String email ) throws FormValidationException {
	        if ( email != null && !email.matches( "([^.@]+)(\\.[^.@]+)*@([^.@]+\\.)+([^.@]+)" ) ) {
	            throw new FormValidationException( "Merci de saisir une adresse mail valide." );
	        }
	    }

	    private String validationImage( HttpServletRequest request, String chemin ) throws FormValidationException {
	        /*
	         * Récupération du contenu du champ image du formulaire. Il faut ici
	         * utiliser la méthode getPart().
	         */
	        String nomFichier = null;
	        InputStream contenuFichier = null;
	        try {
	            Part part = request.getPart( CHAMP_PHOTOUSER );
	            nomFichier = getNomFichier( part );

	            /*
	             * Si la méthode getNomFichier() a renvoyé quelque chose, il s'agit
	             * donc d'un champ de type fichier (input type="file").
	             */
	            if ( nomFichier != null && !nomFichier.isEmpty() ) {
	                /*
	                 * Antibug pour Internet Explorer, qui transmet pour une raison
	                 * mystique le chemin du fichier local à la machine du client...
	                 * 
	                 * Ex : C:/dossier/sous-dossier/fichier.ext
	                 * 
	                 * On doit donc faire en sorte de ne sélectionner que le nom et
	                 * l'extension du fichier, et de se débarrasser du superflu.
	                 */
	                nomFichier = nomFichier.substring( nomFichier.lastIndexOf( '/' ) + 1 )
	                        .substring( nomFichier.lastIndexOf( '\\' ) + 1 );

	                /* Récupération du contenu du fichier */
	                contenuFichier = part.getInputStream();
	                
	                ecrireFichier( contenuFichier, nomFichier, chemin );

	                
	            }
	        } catch ( IllegalStateException e ) {
	            /*
	             * Exception retournée si la taille des données dépasse les limites
	             * définies dans la section <multipart-config> de la déclaration de
	             * notre servlet d'upload dans le fichier web.xml
	             */
	            e.printStackTrace();
	            throw new FormValidationException( "Le fichier envoyé ne doit pas dépasser 1Mo." );
	        } catch ( IOException e ) {
	            /*
	             * Exception retournée si une erreur au niveau des répertoires de
	             * stockage survient (répertoire inexistant, droits d'accès
	             * insuffisants, etc.)
	             */
	            e.printStackTrace();
	            throw new FormValidationException( "Erreur de configuration du serveur." );
	        } catch ( ServletException e ) {
	            /*
	             * Exception retournée si la requête n'est pas de type
	             * multipart/form-data.
	             */
	            e.printStackTrace();
	            throw new FormValidationException(
	                    "Ce type de requête n'est pas supporté, merci d'utiliser le formulaire prévu pour envoyer votre fichier." );
	        }

	        return nomFichier;
	    }

	   
	/*
	 * Ajoute un message correspondant au champ spÃ©cifiÃ© Ã  la map des erreurs.
	 */
	private void setErreur( String champ, String message ) {
	    erreurs.put( champ, message );
	}

	/*
	 * MÃ©thode utilitaire qui retourne null si un champ est vide, et son contenu
	 * sinon.
	 */
	private static String getValeurChamp( HttpServletRequest request, String nomChamp ) {
	    String valeur = request.getParameter( nomChamp );
	    if ( valeur == null || valeur.trim().length() == 0 ) {
	        return null;
	    } else {
	        return valeur.trim();
	    }
	}
	
	 /*
     * Méthode utilitaire qui a pour unique but d'analyser l'en-tête
     * "content-disposition", et de vérifier si le paramètre "filename" y est
     * présent. Si oui, alors le champ traité est de type File et la méthode
     * retourne son nom, sinon il s'agit d'un champ de formulaire classique et
     * la méthode retourne null.
     */
    private static String getNomFichier( Part part ) {
        /* Boucle sur chacun des paramètres de l'en-tête "content-disposition". */
        for ( String contentDisposition : part.getHeader( "content-disposition" ).split( ";" ) ) {
            /* Recherche de l'éventuelle présence du paramètre "filename". */
            if ( contentDisposition.trim().startsWith( "filename" ) ) {
                /*
                 * Si "filename" est présent, alors renvoi de sa valeur,
                 * c'est-à-dire du nom de fichier sans guillemets.
                 */
                return contentDisposition.substring( contentDisposition.indexOf( '=' ) + 1 ).trim().replace( "\"", "" );
            }
        }
        /* Et pour terminer, si rien n'a été trouvé... */
        return null;
    }

    /*
     * Méthode utilitaire qui a pour but d'écrire le fichier passé en paramètre
     * sur le disque, dans le répertoire donné et avec le nom donné.
     */
    private void ecrireFichier( InputStream contenuFichier, String nomFichier, String chemin )
            throws FormValidationException {
        /* Prépare les flux. */
        BufferedInputStream entree = null;
        BufferedOutputStream sortie = null;
        try {
            /* Ouvre les flux. */
            entree = new BufferedInputStream( contenuFichier, TAILLE_TAMPON );
            sortie = new BufferedOutputStream( new FileOutputStream( new File( chemin + nomFichier ) ),
                    TAILLE_TAMPON );

            /*
             * Lit le fichier reçu et écrit son contenu dans un fichier sur le
             * disque.
             */
            byte[] tampon = new byte[TAILLE_TAMPON];
            int longueur = 0;
            while ( ( longueur = entree.read( tampon ) ) > 0 ) {
                sortie.write( tampon, 0, longueur );
            }
        } catch ( Exception e ) {
            throw new FormValidationException( "Erreur lors de l'écriture du fichier sur le disque." );
        } finally {
            try {
                sortie.close();
            } catch ( IOException ignore ) {
            }
            try {
                entree.close();
            } catch ( IOException ignore ) {
            }
        }
    }  

}
