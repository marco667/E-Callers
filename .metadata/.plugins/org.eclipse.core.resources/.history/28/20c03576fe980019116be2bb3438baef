package org.digit.ECallers.dao;

import java.sql.ResultSet;
import java.sql.SQLException;

import static org.digit.ECallers.dao.DAOUtilitaire.*;

import org.digit.ECallers.beans.Contact;
import org.digit.ECallers.beans.User;

import com.mysql.jdbc.Connection;
import com.mysql.jdbc.PreparedStatement;



public class UserDaoImpl implements UserDao {
	
	 private DAOFactory          daoFactory;

	 UserDaoImpl( DAOFactory daoFactory ) {
	        this.daoFactory = daoFactory;
	    }
	 
	 /*
	  * Simple m√©thode utilitaire permettant de faire la correspondance (le
	  * mapping) entre une ligne issue de la table des utilisateurs (un
	  * ResultSet) et un bean Utilisateur.
	  */
	 private static User map( ResultSet resultSet ) throws SQLException {
	     User utilisateur = new User();
	     utilisateur.setId_user( resultSet.getLong( "id_user" ) );
	     utilisateur.setUsername( resultSet.getString( "username" ) );
	     utilisateur.setSurname( resultSet.getString( "surname" ) );
	     utilisateur.setNum_tel( resultSet.getString( "num_tel" ) );
	     return utilisateur;
	 }
	 
	 
	 private static final String SQL_INSERT1 = "INSERT INTO user (username, surname, num_tel) VALUES (?, ?, ?)";

	@Override
	public void create(User utilisateur) throws IllegalArgumentException, DAOException {
		// TODO Auto-generated method stub
		 Connection connexion = null;
		 PreparedStatement preparedStatement = null;
		 ResultSet valeursAutoGenerees = null;

		    try {
		        /* R√©cup√©ration d'une connexion depuis la Factory */
		        connexion = (Connection) daoFactory.getConnection();
		        preparedStatement = (PreparedStatement) initialisationRequetePreparee( connexion, SQL_INSERT1, true, utilisateur.getUsername(), utilisateur.getSurname(), utilisateur.getNum_tel() );
		        int statut = preparedStatement.executeUpdate();
		        /* Analyse du statut retourn√© par la requ√™te d'insertion */
		        if ( statut == 0 ) {
		            throw new DAOException( "√âchec de la cr√©ation de l'utilisateur, aucune ligne ajout√©e dans la table." );
		        }
		        /* R√©cup√©ration de l'id auto-g√©n√©r√© par la requ√™te d'insertion */
		        valeursAutoGenerees = preparedStatement.getGeneratedKeys();
		        if ( valeursAutoGenerees.next() ) {
		            /* Puis initialisation de la propri√©t√© id du bean Utilisateur avec sa valeur */
		            utilisateur.setId_user( valeursAutoGenerees.getLong( 1 ) );
		        } else {
		            throw new DAOException( "√âchec de la cr√©ation de l'utilisateur en base, aucun ID auto-g√©n√©r√© retourn√©." );
		        }
		    } catch ( SQLException e ) {
		        throw new DAOException( e );
		    } finally {
		        fermeturesSilencieuses( valeursAutoGenerees, preparedStatement, connexion );
		    }
		
		
	}
	
	private static final String SQL_INSERT2 = "INSERT INTO contact (nomContact, prenomContact, telContact) VALUES (?, ?, ?)";
	
	@Override
	public void createContact(String nomContact, String prenomContact, String numcontact) throws DAOException {
		// TODO Auto-generated method stub
		// TODO Auto-generated method stub
				 Connection connexion = null;
				 PreparedStatement preparedStatement = null;
				 ResultSet valeursAutoGenerees = null;

				    try {
				        /* R√©cup√©ration d'une connexion depuis la Factory */
				        connexion = (Connection) daoFactory.getConnection();
				        preparedStatement = (PreparedStatement) initialisationRequetePreparee( connexion, SQL_INSERT2, true, nomContact, prenomContact, numcontact );
				        int statut = preparedStatement.executeUpdate();
				        /* Analyse du statut retourn√© par la requ√™te d'insertion */
				        if ( statut == 0 ) {
				            throw new DAOException( "√âchec de creation du contact." );
				        }
				        
				    } catch ( SQLException e ) {
				        throw new DAOException( e );
				    } finally {
				        fermeturesSilencieuses( valeursAutoGenerees, preparedStatement, connexion );
				    }
		
	}
	
	private static final String SQL_INSERT3 = "INSERT INTO infossuppl (photoUser, dateNaiss, email, sexe) VALUES (?, ?, ?, ?)";
	
	@Override
	public void addInfosByuser(String photoUser, String dateNaiss, String email, String sexe) throws DAOException {
		// TODO Auto-generated method stub
		// TODO Auto-generated method stub
				 Connection connexion = null;
				 PreparedStatement preparedStatement = null;
				 ResultSet valeursAutoGenerees = null;

				    try {
				        /* R√©cup√©ration d'une connexion depuis la Factory */
				        connexion = (Connection) daoFactory.getConnection();
				        preparedStatement = (PreparedStatement) initialisationRequetePreparee( connexion, SQL_INSERT3, true, photoUser, dateNaiss, email,  sexe );
				        int statut = preparedStatement.executeUpdate();
				        /* Analyse du statut retourn√© par la requ√™te d'insertion */
				        if ( statut == 0 ) {
				            throw new DAOException( "Echec d'ajout d'informations." );
				        }
				        
				    } catch ( SQLException e ) {
				        throw new DAOException( e );
				    } finally {
				        fermeturesSilencieuses( valeursAutoGenerees, preparedStatement, connexion );
				    }
		
	}
	
	 private static final String SQL_SELECT_PAR_NUMERO_USER = "SELECT id_user, username, surname, num_tel FROM user WHERE username = ? AND num_tel = ?";
	
	@Override
	public User search( String username, String num_tel) throws DAOException {
		// TODO Auto-generated method stub
		/* ImplÈmentation de la mÈthode dÈfinie dans l'interface UtilisateurDao */
	
		    Connection connexion = null;
		    PreparedStatement preparedStatement = null;
		    ResultSet resultSet = null;
		    User utilisateur = null;
		    

		    try {
		        /* RÈcupÈration d'une connexion depuis la Factory */
		        connexion = (Connection) daoFactory.getConnection();
		        preparedStatement = (PreparedStatement) initialisationRequetePreparee( connexion, SQL_SELECT_PAR_NUMERO_USER, false, username, num_tel );
		        resultSet = preparedStatement.executeQuery();
		        /* Parcours de la ligne de donnÈes de l'Èventuel ResulSet retournÈ */
		        if ( resultSet.next() ) {
		            utilisateur = map( resultSet );
		        }else {
		        	throw new DAOException( "Utilisateur inconnu." );
		        }
		    } catch ( SQLException e ) {
		        throw new DAOException( e );
		    } finally {
		        fermeturesSilencieuses( resultSet, preparedStatement, connexion );
		    }

		    return utilisateur;
		
	}
	 
   

    private static final String SQL_SELECT_PAR_NUMERO = "SELECT id_contact, nomContact, prenomContact, telContact FROM contact WHERE telContact = ?";
	
	

    private static Contact map1( ResultSet resultSet ) throws SQLException {
   	     Contact contact = new Contact();
   	     contact.setId_contact( resultSet.getLong( "id_contact" ) );
   	     contact.setNomContact( resultSet.getString( "nomContact" ) );
   	     contact.setPrenomContact( resultSet.getString( "prenomContact" ) );
   	     contact.setNumcontact( resultSet.getString( "telContact" ) );
   	     return contact;
   	 }


   @Override
   	public Contact searchContact(String telContact) throws DAOException {
   		// TODO Auto-generated method stub
   		 Connection connexion = null;
   		    PreparedStatement preparedStatement = null;
   		    ResultSet resultSet = null;
   		    Contact contact  = null;

   		    try {
   		        /* R√©cup√©ration d'une connexion depuis la Factory */
   		        connexion = (Connection) daoFactory.getConnection();
   		        preparedStatement = (PreparedStatement) initialisationRequetePreparee( connexion, SQL_SELECT_PAR_NUMERO, false, telContact );
   		        resultSet = preparedStatement.executeQuery();
   		        /* Parcours de la ligne de donn√©es de l'√©ventuel ResulSet retourn√© */
   		        if ( resultSet.next() ) {
   		            contact = map1( resultSet );
   		        }else {
   		        	throw new DAOException( "Contact non identifiÈ." );
   		        }
   		    } catch ( SQLException e ) {
   		        throw new DAOException( e );
   		    } finally {
   		        fermeturesSilencieuses( resultSet, preparedStatement, connexion );
   		    }

   		    return contact;
   		
   	}



}
